/*
 * Copyright 2019 cats-tagless maintainers
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cats.tagless

import cats.tagless.derived.DerivedContravariantK
import cats.~>

import scala.annotation.implicitNotFound

/** A higher-kinded `Contravariant` functor. Must obey the laws in `cats.tagless.laws.ContravariantKLaws`.
  */
@implicitNotFound("Could not find an instance of ContravariantK for ${Alg}")
trait ContravariantK[Alg[_[_]]] extends InvariantK[Alg] {
  def contramapK[F[_], G[_]](af: Alg[F])(fk: G ~> F): Alg[G]
  override def imapK[F[_], G[_]](af: Alg[F])(fk: F ~> G)(gk: G ~> F): Alg[G] = contramapK(af)(gk)
}

object ContravariantK extends DerivedContravariantK {

  // =======================
  // Generated by simulacrum
  // =======================

  @inline def apply[Alg[_[_]]](implicit instance: ContravariantK[Alg]): ContravariantK[Alg] = instance

  trait AllOps[Alg[_[_]], F[_]] extends Ops[Alg, F] with InvariantK.AllOps[Alg, F] {
    type TypeClassType <: ContravariantK[Alg]
    val typeClassInstance: TypeClassType
  }

  object ops {
    implicit def toAllContravariantKOps[Alg[_[_]], F[_]](
        target: Alg[F]
    )(implicit tc: ContravariantK[Alg]): AllOps[Alg, F] {
      type TypeClassType = ContravariantK[Alg]
    } = new AllOps[Alg, F] {
      type TypeClassType = ContravariantK[Alg]
      val self = target
      val typeClassInstance: TypeClassType = tc
    }
  }

  trait Ops[Alg[_[_]], F[_]] {
    type TypeClassType <: ContravariantK[Alg]
    val typeClassInstance: TypeClassType
    def self: Alg[F]
    def contramapK[G[_]](fk: G ~> F): Alg[G] =
      typeClassInstance.contramapK[F, G](self)(fk)
  }

  trait ToContravariantKOps {
    implicit def toContravariantKOps[Alg[_[_]], F[_]](target: Alg[F])(implicit tc: ContravariantK[Alg]): Ops[Alg, F] {
      type TypeClassType = ContravariantK[Alg]
    } = new Ops[Alg, F] {
      type TypeClassType = ContravariantK[Alg]
      val self = target
      val typeClassInstance: TypeClassType = tc
    }
  }

  object nonInheritedOps extends ToContravariantKOps
}

/*
 * Copyright 2019 cats-tagless maintainers
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cats.tagless

import cats.tagless.derived.DerivedApplyK
import cats.data.Tuple2K
import cats.~>

import scala.annotation.implicitNotFound

@implicitNotFound("Could not find an instance of ApplyK for ${Alg}")
trait ApplyK[Alg[_[_]]] extends SemigroupalK[Alg] with FunctorK[Alg] {
  def map2K[F[_], G[_], H[_]](af: Alg[F], ag: Alg[G])(f: Tuple2K[F, G, *] ~> H): Alg[H] =
    mapK(productK(af, ag))(f)
}

object ApplyK extends DerivedApplyK {

  // =======================
  // Generated by simulacrum
  // =======================

  @inline def apply[Alg[_[_]]](implicit instance: ApplyK[Alg]): ApplyK[Alg] = instance

  trait AllOps[Alg[_[_]], F[_]] extends Ops[Alg, F] with SemigroupalK.AllOps[Alg, F] with FunctorK.AllOps[Alg, F] {
    type TypeClassType <: ApplyK[Alg]
    val typeClassInstance: TypeClassType
  }

  object ops {
    implicit def toAllApplyKOps[Alg[_[_]], F[_]](target: Alg[F])(implicit tc: ApplyK[Alg]): AllOps[Alg, F] {
      type TypeClassType = ApplyK[Alg]
    } = new AllOps[Alg, F] {
      type TypeClassType = ApplyK[Alg]
      val self = target
      val typeClassInstance: TypeClassType = tc
    }
  }

  trait Ops[Alg[_[_]], F[_]] {
    type TypeClassType <: ApplyK[Alg]
    val typeClassInstance: TypeClassType
    def self: Alg[F]
    def map2K[G[_], H[_]](ag: Alg[G])(f: Tuple2K[F, G, *] ~> H): Alg[H] =
      typeClassInstance.map2K[F, G, H](self, ag)(f)
  }

  trait ToApplyKOps {
    implicit def toApplyKOps[Alg[_[_]], F[_]](target: Alg[F])(implicit tc: ApplyK[Alg]): Ops[Alg, F] {
      type TypeClassType = ApplyK[Alg]
    } = new Ops[Alg, F] {
      type TypeClassType = ApplyK[Alg]
      val self = target
      val typeClassInstance: TypeClassType = tc
    }
  }

  object nonInheritedOps extends ToApplyKOps
}
